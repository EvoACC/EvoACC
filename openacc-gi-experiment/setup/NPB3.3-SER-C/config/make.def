#---------------------------------------------------------------------------
#
#                SITE- AND/OR PLATFORM-SPECIFIC DEFINITIONS. 
#
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# Items in this file will need to be changed for each platform.
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# Parallel C:
#
# For IS, which is in C, the following must be defined:
#
# CC         - C/C++ compiler 
# CFLAGS     - C/C++ compilation arguments
# C_INC      - any -I arguments required for compiling C/C++
# CLINK      - C/C++ linker
# CLINKFLAGS - C/C++ linker flags
# C_LIB      - any -L and -l arguments required for linking C/C++ 
#
# compilations are done with $(CC) $(C_INC) $(CFLAGS) or
#                            $(CC) $(CFLAGS)
# linking is done with       $(CLINK) $(C_LIB) $(CLINKFLAGS)
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# C compilers
#---------------------------------------------------------------------------

# OpenUH compiler
ifeq ($(CC), uhcc)
    CC = uhcc
    CFLAGS = -accdfa -fopenacc -nvcc,-arch=sm_35,-fmad=false -nvpath,/opt/cuda/5.5/bin/ -Wb,-constcache 
    CLINK = $(CC)
    CLINKFLAGS = -lopenacc
endif

# PGI C compiler
ifeq ($(CC), pgcc)

    ifndef TA
        TA=nvidia,cc35 
    endif
    
    CLINK = $(CC)
    CFLAGS = -O3 
    CLINKFLAGS = -O3 
    
    ifeq ($(PXM), omp)
        CFLAGS := $(CFLAGS) -mp $(EXTRA_CFLAGS) -Minfo -mcmodel=medium
        CLINKFLAGS := $(CLINKFLAGS) -mp $(EXTRA_CLINKFLAGS) -Minfo=accel -mcmodel=medium
    else
        ifeq ($(PXM), acc)
            CFLAGS := $(CFLAGS) -acc -ta=$(TA) $(EXTRA_CFLAGS) -Minfo=accel -mcmodel=medium
            CLINKFLAGS := $(CLINKFLAGS) -acc -ta=$(TA) $(EXTRA_CLINKFLAGS) -Minfo=accel -mcmodel=medium
        endif
    endif
endif

# CRAY compiler
ifeq ($(CC), cc)
    CC = cc
    CFLAGS = 
    CLINK = cc
    CLINKFLAGS =
endif

# GCC compiler
ifeq ($(CC), gcc)
    CC = gcc
    CFLAGS = -O3 -mcmodel=medium
    CLINK = gcc
    CLINKFLAGS = -O3 -mcmodel=medium
endif

# Clang compiler
ifeq ($(CC), clang)
    CC = clang
    CFLAGS = -O3 
    CLINK = clang
    CLINKFLAGS = -O3 
    
    ifeq ($(PXM), omp)
        CFLAGS := $(CFLAGS) -fopenmp=libomp
        CLINKFLAGS := $(CLINKFLAGS) -fopenmp=libomp
    endif
endif

# Intel compiler
ifeq ($(CC), icc)
    CC = icc
    CFLAGS = -O3 -mcmodel=medium
    CLINK = icc
    CLINKFLAGS = -O3 -mcmodel=medium
endif

#---------------------------------------------------------------------------
# C++ compilers
#---------------------------------------------------------------------------
# PGI C++ compiler
ifeq ($(CC), pgc++)

    ifndef TA
        TA=nvidia,cc35 
    endif
    
    CLINK = $(CC)
    CFLAGS = -O3 
    CLINKFLAGS = -O3 
    
    ifeq ($(PXM), omp)
        CFLAGS := $(CFLAGS) -mp $(EXTRA_CFLAGS) -Minfo -mcmodel=medium
        CLINKFLAGS := $(CLINKFLAGS) -mp $(EXTRA_CLINKFLAGS) -Minfo=accel -mcmodel=medium
    else
        ifeq ($(PXM), acc)
            CFLAGS := $(CFLAGS) -acc -ta=$(TA) $(EXTRA_CFLAGS) -Minfo=accel -mcmodel=medium
            CLINKFLAGS := $(CLINKFLAGS) -acc -ta=$(TA) $(EXTRA_CLINKFLAGS) -Minfo=accel -mcmodel=medium
        endif
    endif
endif

#---------------------------------------------------------------------------
# These macros are passed to the linker 
#---------------------------------------------------------------------------
C_LIB  = -lm

#---------------------------------------------------------------------------
# These macros are passed to the compiler 
#---------------------------------------------------------------------------
C_INC = -I../common

#---------------------------------------------------------------------------
# Global *compile time* flags for C programs
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# Global *link time* flags. Flags for increasing maximum executable 
# size usually go here. 
#---------------------------------------------------------------------------


#---------------------------------------------------------------------------
# Utilities C:
#
# This is the C compiler used to compile C utilities.  Flags required by 
# this compiler go here also; typically there are few flags required; hence 
# there are no separate macros provided for such flags.
#---------------------------------------------------------------------------


#---------------------------------------------------------------------------
# Destination of executables, relative to subdirs of the main directory. . 
#---------------------------------------------------------------------------
BINDIR	= .


#---------------------------------------------------------------------------
# The variable RAND controls which random number generator 
# is used. It is described in detail in README.install. 
# Use "randi8" unless there is a reason to use another one. 
# Other allowed values are "randi8_safe", "randdp" and "randdpvec"
#---------------------------------------------------------------------------
#RAND   = randi8
# The following is highly reliable but may be slow:
RAND   = randdp


#---------------------------------------------------------------------------
# The variable WTIME is the name of the wtime source code module in the
# NPB3.x/common directory.  
# For most machines,       use wtime.c
# For SGI power challenge: use wtime_sgi64.c
#---------------------------------------------------------------------------
WTIME  = wtime.c


#---------------------------------------------------------------------------
# Enable if either Cray or IBM: 
# (no such flag for most machines: see common/wtime.h)
# This is used by the C compiler to pass the machine name to common/wtime.h,
# where the C/Fortran binding interface format is determined
#---------------------------------------------------------------------------
# MACHINE	=	-DCRAY
# MACHINE	=	-DIBM


